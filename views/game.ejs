<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Game Management</title>
</head>
<body>
  <h1>Welcome, <%= player.name %>!</h1>
  <h2>Your Resources:</h2>
  <ul>
    <li>Money: <%= player.resources.money %></li>
    <li>Energy: <%= player.resources.energy %></li>
  </ul>

  <h2>Your Buildings:</h2>
  <!-- Display the player's buildings -->
  <ul>
    <% player.buildings.forEach(building => { %>
      <li>
        <strong><%= building.type %></strong><br>
        Resources: <%= building.resources.energy %> Energy, <%= building.resources.money %> Money<br>
        Construction Cost: <%= building.constructionCost.energy %> Energy, <%= building.constructionCost.money %> Money<br>
        <!-- Remove button -->
        <button class="remove-building" data-building-id="<%= building._id %>">Remove</button>
              <!-- Upgrade button (only for plantation and enclosure) -->
      <% if (building.type === 'plantation') { %>
        <button class="upgrade-building" data-building-id="<%= building._id %>" data-upgrade-to="greenhouse">Upgrade to Greenhouse</button>
      <% } else if (building.type === 'enclosure') { %>
        <button class="upgrade-building" data-building-id="<%= building._id %>" data-upgrade-to="zoo">Upgrade to Zoo</button>
      <% } %>
      </li>
    <% }) %>

  </ul>



<!-- Сюда добавляем выбор для апгрейда -->
<script>
  document.querySelectorAll('.upgrade-building').forEach(button => {
  button.addEventListener('click', async (event) => {
    const buildingId = event.target.getAttribute('data-building-id');
    const upgradeTo = event.target.getAttribute('data-upgrade-to');  // Тип здания для апгрейда

    try {
      // Отправляем запрос на сервер для апгрейда
      const response = await axios.patch(`/build/upgrade/${buildingId}`, {
        upgradeTo: upgradeTo
      });

      if (response.status === 200) {
        alert('Building upgraded successfully!');
        location.reload();  // Перезагружаем страницу для обновления данных
      } else {
        alert('Failed to upgrade building.');
      }
    } catch (error) {
      console.error('Error upgrading building:', error);
      alert('An error occurred while upgrading the building.');
    }
  });
});
</script>

  <h2>Available Buildings:</h2>
  <form id="buildForm">
    <label for="buildingType">Choose a building:</label>
    <select id="buildingType" name="buildingType">
      <% availableBuildings.forEach(building => { %>
        <option value="<%= building.type %>"><%= building.type %></option>
      <% }) %>
    </select>
    <button type="submit">Build</button>
  </form>

  <!-- Connect axios CDN -->
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script>
    const form = document.getElementById('buildForm');

      // Catching form submission
  form.addEventListener('submit', async (event) => {
    event.preventDefault();

    const buildingType = document.getElementById('buildingType').value;
    const playerId = "<%= player._id %>";  // Add playerId from ejs

    try {
      // POST-request to create building
      const response = await axios.post('/build', {
        buildingType: buildingType,
        playerId: playerId
      });

      if (response.status === 200) {
        alert('Building successfully created!');
        // Refresh the page
        location.reload();
      } else {
        alert('Failed to build.');
      }
    } catch (error) {
      console.error('Error creating building:', error);
      alert('An error occurred while creating the building.');
    }
  });

  // Handle remove building button click
  document.querySelectorAll('.remove-building').forEach(button => {
    button.addEventListener('click', async (event) => {
      const buildingId = event.target.getAttribute('data-building-id');
      const playerId = "<%= player._id %>";

      try {
        // DELETE-request to remove building
        const response = await axios.delete(`/build/${buildingId}`, {
          data: { playerId: playerId }
        });

        if (response.status === 200) {
          alert('Building successfully removed!');
          // Refresh the page
          location.reload();
        } else {
          alert('Failed to remove building.');
        }
      } catch (error) {
        console.error('Error removing building:', error);
        alert('An error occurred while removing the building.');
      }
    });
  });
  </script>
</body>
</html>
